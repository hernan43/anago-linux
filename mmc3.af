/*
CPU memory bank for T*ROM
cpu address|rom address    |page|task
$8000-$9fff|0x02000-0x03fff|1   |write 0x2aaa
$a000-$bfff|n * 0x2000     |n   |write area
$c000-$ffff|0x7c000-0x7ffff|fix |write 0x5555, boot area

PPU memory bank for TLROM TKROM TKSROM
ppu address|rom address    |page|task
$0000-$07ff|0x02800-0x02fff|0x0a|write 0x2aaa
$0800-$0fff|0x05000-0x057ff|0x14|write 0x5555
$1000-$1fff|n * 0x1000     |n   |write area
*/
board <- {
	mappernum = 4, vram_mirrorfind = false,
	cpu = {banksize = 0x2000, maxsize = 4 * mega},
	ppu = {banksize = 0x0400, maxsize = 2 * mega},
};
function initalize(d, cpu_banksize, ppu_banksize)
{
	cpu_command(d, 0x0000, 0xa000, cpu_banksize);
	cpu_command(d, 0x2aaa, 0x8000, cpu_banksize);
	cpu_command(d, 0x5555, 0xc000, 0x4000);
	cpu_write(d, 0x8000, 7);
	cpu_write(d, 0x8001, 0);
	cpu_write(d, 0x8000, 6);
	cpu_write(d, 0x8001, 1);

	ppu_command(d, 0x0000, 0x1000, ppu_banksize);
	ppu_command(d, 0x2aaa, 0x0000, 0x0800);
	ppu_command(d, 0x5555, 0x0800, 0x0800);
	cpu_write(d, 0x8000, 2);
	cpu_write(d, 0x8001, 0);
	cpu_write(d, 0x8000, 0);
	cpu_write(d, 0x8001, 0x0a);
	cpu_write(d, 0x8000, 1);
	cpu_write(d, 0x8001, 0x14);
}
function cpu_transfer(d, start, end, cpu_banksize)
{
	for(local i = start; i < end - 2; i += 1){
		cpu_write(d, 0x8000, 7);
		cpu_write(d, 0x8001, i);
		cpu_program(d, 0xa000, cpu_banksize);
	}
	cpu_program(d, 0xc000, cpu_banksize * 2)
}
function ppu_transfer(d, start, end, ppu_banksize)
{
	for(local i = start; i < end; i += 4){
		cpu_write(d, 0x8000, 2);
		cpu_write(d, 0x8001, i);
		cpu_write(d, 0x8000, 3);
		cpu_write(d, 0x8001, i | 1);
		cpu_write(d, 0x8000, 4);
		cpu_write(d, 0x8001, i | 2);
		cpu_write(d, 0x8000, 5);
		cpu_write(d, 0x8001, i | 3);
		ppu_program(d, 0x1000, ppu_banksize * 4);
	}
}
