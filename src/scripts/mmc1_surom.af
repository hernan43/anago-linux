/*
SUROM SXROM CPU memory bank
cpu address|rom address    |page|task
--SNROM area -- even ----------------
$8000-$bfff|n * 0x4000|even 0x00|write 0x2aaa + write area
$c000-$ffff|0x3c000-0x3ffff|fix |write 0x5555
--SNROM area -- odd -----------------
$8000-$bfff|0x00000-0x03fff|fix |write 0x2aaa
$c000-$ffff|n * 0x4000|odd  0x01|write 0x5555 + write area
--SUROM area -- even ----------------
$8000-$bfff|n * 0x4000|even 0x20|write 0x2aaa + write area
$c000-$ffff|0x7c000-0x7ffff|fix |write 0x5555
--SUROM area -- odd -----------------
$8000-$bfff|0x40000-0x43fff|fix |write 0x2aaa
$c000-$ffff|n * 0x4000|odd  0x21|write 0x5555 + write area
*/
cpu_banksize <- 0x4000;
board <- {
	mappernum = 1, vram_mirrorfind = false,
	cpu = {banksize = 0x4000, maxsize = 4 * mega},
	ppu = {banksize = 0x2000, maxsize = 0 * mega}
}
function mmc1_write(d, address, data)
{
	for(local i = 0; i < 5; i++){
		cpu_write(d, address, data >> i);
	}
}
function initalize(d, cpu_banksize, ppu_banksize)
{
	cpu_write(d, 0x8000, 0x80);
	cpu_command(d, 0, 0x8000, cpu_banksize);
	cpu_command(d, 0x2aaa, 0x8000, cpu_banksize);
	cpu_command(d, 0x5555, 0xc000, cpu_banksize);
	mmc1_write(d, 0x8000, 0x0c);
	mmc1_write(d, 0xe000, 0); //cpubank #0
	mmc1_write(d, 0xa000, 0); //ROM area 1st 2M
}

function cpu_transfer(d, start, end, cpu_banksize)
{
	for(local k = 0; k < 0x20; k += 0x10){
		mmc1_write(d, 0xa000, k);
		for(local i = 0; i < 0x10; i += 2){
			//even page
			cpu_command(d, 0x2aaa, 0x8000, cpu_banksize);
			cpu_command(d, 0x5555, 0xc000, cpu_banksize);
			mmc1_write(d, 0x8000, 0x0c);
			mmc1_write(d, 0xe000, i);
			cpu_program(d, 0x8000, 0x4000);
			
			//odd page
			cpu_command(d, 0x5555, 0x8000, cpu_banksize);
			cpu_command(d, 0x2aaa, 0xc000, cpu_banksize);
			mmc1_write(d, 0x8000, 0x08);
			mmc1_write(d, 0xe000, i | 1);
			cpu_program(d, 0xc000, 0x4000);
		}
	}
}

function ppu_transfer(d, start, end, bank)
{
}
