/*VRC4b FLASH MEMORY WRITE
generic CPU memory bank
cpu address|rom address    |page|task
$8000-$9fff|0x02000-0x03fff|1   |write 0x2aaa
$a000-$bfff|n * 0x2000     |n   |write area
$c000-$dfff|末尾-1         |fix |write 0x5555
$e000-$efff|末尾           |fix |boot area, 未使用
PPU memory bank
ppu address|rom address    |page|task
$0000-$04ff|0x02800-0x027ff|0x0a|write (0x2aaa & 0x03ff) + 0
$0400-$07ff|0x05400-0x057ff|0x15|write (0x5555 & 0x03ff) + 0x400
$1000-$1fff|n * 0x1000     |n   |write area*/
board <- {
	mappernum = 25,  vram_mirrorfind = false,
	cpu = {banksize = 0x2000, maxsize = 2 * mega},
	ppu = {banksize = 0x0400, maxsize = 2 * mega}
};
function initalize(d, cpu_banksize, ppu_banksize)
{
	cpu_write(d, 0x9001, 0);
	cpu_write(d, 0x8000, 1);
	cpu_write(d, 0xa000, 0);
	cpu_command(d, 0, 0xa000, cpu_banksize);
	cpu_command(d, 0x2aaa, 0x8000, cpu_banksize);
	cpu_command(d, 0x5555, 0xc000, cpu_banksize);
	
	cpu_write(d, 0xb002, 0);
	cpu_write(d, 0xb000, 0xa);
	cpu_write(d, 0xb003, 1);
	cpu_write(d, 0xb001, 5);
	cpu_write(d, 0xc002, 0);
	cpu_write(d, 0xc000, 0);
	ppu_command(d, 0, 0x0800, ppu_banksize);
	ppu_command(d, 0x2aaa, 0x0000, ppu_banksize);
	ppu_command(d, 0x5555, 0x0400, ppu_banksize);
}
function cpu_transfer(d, start, end, cpu_banksize)
{
	for(local i = start; i < end - 2; i++){
		cpu_write(d, 0xa000, i);
		cpu_program(d, 0xa000, cpu_banksize);
	}
	cpu_program(d, 0xc000, cpu_banksize * 2);
}
function ppu_transfer(d, start, end, ppu_banksize)
{
	for(local i = start; i < end; i += 4){
		cpu_write(d, 0xd002, i >> 4);
		cpu_write(d, 0xd000, i);
		cpu_write(d, 0xd003, i >> 4);
		cpu_write(d, 0xd001, i | 1);
		cpu_write(d, 0xe002, i >> 4);
		cpu_write(d, 0xe000, i | 2);
		cpu_write(d, 0xe003, i >> 4);
		cpu_write(d, 0xe001, i | 3);
		ppu_program(d, 0x1000, ppu_banksize * 4);
	}
}
